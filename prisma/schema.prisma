generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime

   bots      Bot[]
  documents Document[]
  messages Message[]
  sessions      Session[]
  accounts      Account[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}


model Bot {
  id          String     @id @default(uuid())
  name        String
  purpose     String

   assistantId String?  @map("assistant_id")


  whatsapp_number      String?
  telegram_username   String?
  telegram_number     String?
  phoneNumber String 


  user        User       @relation(fields: [userId], references: [id])
  userId      String


  documents   Document[]
  messages    Message[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Document {
  id        String   @id @default(uuid())
  name      String
  url       String  
  bot       Bot      @relation(fields: [botId], references: [id])
  botId     String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
}

model Message {
  id             String   @id @default(uuid())
  bot            Bot      @relation(fields: [botId], references: [id])
  botId          String
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  sender         String  
  contentSnippet String
  fallback       Boolean  
  reply           String?
  createdAt      DateTime @default(now())
}